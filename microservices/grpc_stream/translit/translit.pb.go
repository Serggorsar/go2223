// Code generated by protoc-gen-go. DO NOT EDIT.
// source: translit.proto

/*
Package translit is a generated protocol buffer package.

It is generated from these files:

	translit.proto

It has these top-level messages:

	Word
*/
package translit

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Word struct {
	Word string `protobuf:"bytes,1,opt,name=Word" json:"Word,omitempty"`
}

func (m *Word) Reset()                    { *m = Word{} }
func (m *Word) String() string            { return proto.CompactTextString(m) }
func (*Word) ProtoMessage()               {}
func (*Word) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Word) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func init() {
	proto.RegisterType((*Word)(nil), "translit.Word")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transliteration service

type TransliterationClient interface {
	EnRu(ctx context.Context, opts ...grpc.CallOption) (Transliteration_EnRuClient, error)
}

type transliterationClient struct {
	cc *grpc.ClientConn
}

func NewTransliterationClient(cc *grpc.ClientConn) TransliterationClient {
	return &transliterationClient{cc}
}

func (c *transliterationClient) EnRu(ctx context.Context, opts ...grpc.CallOption) (Transliteration_EnRuClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Transliteration_serviceDesc.Streams[0], c.cc, "/translit.Transliteration/EnRu", opts...)
	if err != nil {
		return nil, err
	}
	x := &transliterationEnRuClient{stream}
	return x, nil
}

type Transliteration_EnRuClient interface {
	Send(*Word) error
	Recv() (*Word, error)
	grpc.ClientStream
}

type transliterationEnRuClient struct {
	grpc.ClientStream
}

func (x *transliterationEnRuClient) Send(m *Word) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transliterationEnRuClient) Recv() (*Word, error) {
	m := new(Word)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Transliteration service

type TransliterationServer interface {
	EnRu(Transliteration_EnRuServer) error
}

func RegisterTransliterationServer(s *grpc.Server, srv TransliterationServer) {
	s.RegisterService(&_Transliteration_serviceDesc, srv)
}

func _Transliteration_EnRu_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransliterationServer).EnRu(&transliterationEnRuServer{stream})
}

type Transliteration_EnRuServer interface {
	Send(*Word) error
	Recv() (*Word, error)
	grpc.ServerStream
}

type transliterationEnRuServer struct {
	grpc.ServerStream
}

func (x *transliterationEnRuServer) Send(m *Word) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transliterationEnRuServer) Recv() (*Word, error) {
	m := new(Word)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Transliteration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "translit.Transliteration",
	HandlerType: (*TransliterationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnRu",
			Handler:       _Transliteration_EnRu_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "translit.proto",
}

func init() { proto.RegisterFile("translit.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x29, 0x4a, 0xcc,
	0x2b, 0xce, 0xc9, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xa4,
	0xb8, 0x58, 0xc2, 0xf3, 0x8b, 0x52, 0x84, 0x84, 0x20, 0xb4, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67,
	0x10, 0x98, 0x6d, 0x64, 0xcf, 0xc5, 0x1f, 0x02, 0x55, 0x97, 0x5a, 0x94, 0x58, 0x92, 0x99, 0x9f,
	0x27, 0xa4, 0xc3, 0xc5, 0xe2, 0x9a, 0x17, 0x54, 0x2a, 0xc4, 0xa7, 0x07, 0x37, 0x11, 0xa4, 0x54,
	0x0a, 0x8d, 0xaf, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0x98, 0xc4, 0x06, 0xb6, 0xcd, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x91, 0xf3, 0x8e, 0x2f, 0x7f, 0x00, 0x00, 0x00,
}
